pipeline{
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/Chauhandevansh/devops-task.git'
            }
        }
    
        stage('Install Dependencies & Run Tests') {
            steps {
                sh 'npm ci'
                sh 'echo "Code Testing"'
                sh 'echo "No tests defined"'
            }
        }
    
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} \
                        | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}

                        docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    sh """
                        docker run -d -p 3000:3000 --name express-test ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}
                        sleep 5
                        curl -f http://localhost:3000 || (echo 'Container test failed' && exit 1)
                        docker stop express-test
                        docker rm express-test
                    """
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh "docker push $AWS_ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:{$IMAGE_TAG}"
                }
            }
        }
    }
        post {
            success {
                echo 'Build succeeded üéâ'
            }
            failure {
                echo 'Build failed ‚ùå'
            }
            unstable {
                echo 'Build unstable ‚ö†Ô∏è'
            }   
            aborted {
                echo 'Build was aborted ‚èπÔ∏è'
            }
            always {
                cleanWs()   // cleanup in all cases
            }
    }
}
