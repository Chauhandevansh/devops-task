pipeline{
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Chauhandevansh/devops-task.git'
            }
        }
    
        stage('Install Dependencies & Run Tests') {
            steps {
                sh 'npm ci'
                sh 'echo "Code Testing"'
                sh 'echo "No tests defined"'
            }
        }
    
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} \
                        | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}

                        docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
                }
            }
        }
        stage('Deploy to ECS') {
            steps {
                script {
                    sh '''
                        # Fetch current task definition
                        aws ecs describe-task-definition \
                            --task-definition ${TASK_FAMILY} \
                            --query taskDefinition \
                            --output json > taskdef.json

                        # Remove read-only fields
                        cat taskdef.json | jq 'del(
                          .status,
                          .revision,
                          .taskDefinitionArn,
                          .requiresAttributes,
                          .compatibilities,
                          .registeredAt,
                          .registeredBy
                        )' > new-task-def.json

                        # Register new revision (still uses :latest image)
                        aws ecs register-task-definition \
                            --cli-input-json file://new-task-def.json

                        # Update ECS service to pick the new revision
                        aws ecs update-service \
                            --cluster ${ECS_CLUSTER} \
                            --service ${ECS_SERVICE} \
                            --force-new-deployment
                    '''
                }
            }
        }
    }
    
        post {
            success {
                echo 'Build succeeded üéâ'
            }
            failure {
                echo 'Build failed ‚ùå'
            }
            unstable {
                echo 'Build unstable ‚ö†Ô∏è'
            }   
            aborted {
                echo 'Build was aborted ‚èπÔ∏è'
            }
            always {
                cleanWs()   // cleanup in all cases
            }
    }
}